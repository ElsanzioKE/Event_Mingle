{"ast":null,"code":"import { createSlice, createAsyncThunk, createAction } from '@reduxjs/toolkit';\nimport authService from './authService';\nimport { extractErrorMessage } from '../../utils';\n\n// Get user from localstorage\nconst user = JSON.parse(localStorage.getItem('user'));\nconst initialState = {\n  user: user ? user : null,\n  isLoading: false\n};\n\n// Register new user\nexport const register = createAsyncThunk('auth/register', async (user, thunkAPI) => {\n  try {\n    return await authService.register(user);\n  } catch (error) {\n    return thunkAPI.rejectWithValue(extractErrorMessage(error));\n  }\n});\n\n// Login user\nexport const login = createAsyncThunk('auth/login', async (user, thunkAPI) => {\n  try {\n    return await authService.login(user);\n  } catch (error) {\n    return thunkAPI.rejectWithValue(extractErrorMessage(error));\n  }\n});\n\n// Logout user\nexport const logout = createAction('auth/logout', () => {\n  authService.logout();\n  return {};\n});\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    logout: state => {\n      state.user = null;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(register.pending, state => {\n      state.isLoading = true;\n    }).addCase(register.fulfilled, (state, action) => {\n      state.user = action.payload;\n      state.isLoading = false;\n    }).addCase(register.rejected, state => {\n      state.isLoading = false;\n    }).addCase(login.pending, state => {\n      state.isLoading = false;\n    }).addCase(login.fulfilled, (state, action) => {\n      state.user = action.payload;\n      state.isLoading = false;\n    }).addCase(login.rejected, state => {\n      state.isLoading = false;\n    });\n  }\n});\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","createAction","authService","extractErrorMessage","user","JSON","parse","localStorage","getItem","initialState","isLoading","register","thunkAPI","error","rejectWithValue","login","logout","authSlice","name","reducers","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","reducer"],"sources":["C:/Users/SKULL/Documents/GitHub/Event_Mingle/frontend/src/features/auth/authSlice.js"],"sourcesContent":["\r\nimport { createSlice, createAsyncThunk, createAction } from '@reduxjs/toolkit';\r\nimport authService from './authService';\r\nimport { extractErrorMessage } from '../../utils';\r\n\r\n// Get user from localstorage\r\nconst user = JSON.parse(localStorage.getItem('user'))\r\nconst initialState = {\r\n  user: user ? user : null,\r\n  isLoading: false,\r\n}\r\n\r\n// Register new user\r\nexport const register = createAsyncThunk(\r\n  'auth/register',\r\n  async (user, thunkAPI) => {\r\n    try {\r\n      return await authService.register(user)\r\n    } catch (error) {\r\n      return thunkAPI.rejectWithValue(extractErrorMessage(error))\r\n    }\r\n  }\r\n)\r\n\r\n// Login user\r\nexport const login = createAsyncThunk('auth/login', async (user, thunkAPI) => {\r\n  try {\r\n    return await authService.login(user)\r\n  } catch (error) {\r\n    return thunkAPI.rejectWithValue(extractErrorMessage(error))\r\n  }\r\n})\r\n\r\n// Logout user\r\nexport const logout = createAction('auth/logout', () => {\r\n  authService.logout()\r\n  return {}\r\n})\r\n\r\nexport const authSlice = createSlice({\r\n  name: 'auth',\r\n  initialState,\r\n  reducers: {\r\n    logout: (state) => {\r\n      state.user = null\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(register.pending, (state) => {\r\n        state.isLoading = true\r\n      })\r\n      .addCase(register.fulfilled, (state, action) => {\r\n        state.user = action.payload\r\n        state.isLoading = false\r\n      })\r\n      .addCase(register.rejected, (state) => {\r\n        state.isLoading = false\r\n      })\r\n      .addCase(login.pending, (state) => {\r\n        state.isLoading = false\r\n      })\r\n      .addCase(login.fulfilled, (state, action) => {\r\n        state.user = action.payload\r\n        state.isLoading = false\r\n      })\r\n      .addCase(login.rejected, (state) => {\r\n        state.isLoading = false\r\n      })\r\n  },\r\n})\r\n\r\nexport default authSlice.reducer\r\n"],"mappings":"AACA,SAASA,WAAW,EAAEC,gBAAgB,EAAEC,YAAY,QAAQ,kBAAkB;AAC9E,OAAOC,WAAW,MAAM,eAAe;AACvC,SAASC,mBAAmB,QAAQ,aAAa;;AAEjD;AACA,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;AACrD,MAAMC,YAAY,GAAG;EACnBL,IAAI,EAAEA,IAAI,GAAGA,IAAI,GAAG,IAAI;EACxBM,SAAS,EAAE;AACb,CAAC;;AAED;AACA,OAAO,MAAMC,QAAQ,GAAGX,gBAAgB,CACtC,eAAe,EACf,OAAOI,IAAI,EAAEQ,QAAQ,KAAK;EACxB,IAAI;IACF,OAAO,MAAMV,WAAW,CAACS,QAAQ,CAACP,IAAI,CAAC;EACzC,CAAC,CAAC,OAAOS,KAAK,EAAE;IACd,OAAOD,QAAQ,CAACE,eAAe,CAACX,mBAAmB,CAACU,KAAK,CAAC,CAAC;EAC7D;AACF,CACF,CAAC;;AAED;AACA,OAAO,MAAME,KAAK,GAAGf,gBAAgB,CAAC,YAAY,EAAE,OAAOI,IAAI,EAAEQ,QAAQ,KAAK;EAC5E,IAAI;IACF,OAAO,MAAMV,WAAW,CAACa,KAAK,CAACX,IAAI,CAAC;EACtC,CAAC,CAAC,OAAOS,KAAK,EAAE;IACd,OAAOD,QAAQ,CAACE,eAAe,CAACX,mBAAmB,CAACU,KAAK,CAAC,CAAC;EAC7D;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMG,MAAM,GAAGf,YAAY,CAAC,aAAa,EAAE,MAAM;EACtDC,WAAW,CAACc,MAAM,CAAC,CAAC;EACpB,OAAO,CAAC,CAAC;AACX,CAAC,CAAC;AAEF,OAAO,MAAMC,SAAS,GAAGlB,WAAW,CAAC;EACnCmB,IAAI,EAAE,MAAM;EACZT,YAAY;EACZU,QAAQ,EAAE;IACRH,MAAM,EAAGI,KAAK,IAAK;MACjBA,KAAK,CAAChB,IAAI,GAAG,IAAI;IACnB;EACF,CAAC;EACDiB,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACZ,QAAQ,CAACa,OAAO,EAAGJ,KAAK,IAAK;MACpCA,KAAK,CAACV,SAAS,GAAG,IAAI;IACxB,CAAC,CAAC,CACDa,OAAO,CAACZ,QAAQ,CAACc,SAAS,EAAE,CAACL,KAAK,EAAEM,MAAM,KAAK;MAC9CN,KAAK,CAAChB,IAAI,GAAGsB,MAAM,CAACC,OAAO;MAC3BP,KAAK,CAACV,SAAS,GAAG,KAAK;IACzB,CAAC,CAAC,CACDa,OAAO,CAACZ,QAAQ,CAACiB,QAAQ,EAAGR,KAAK,IAAK;MACrCA,KAAK,CAACV,SAAS,GAAG,KAAK;IACzB,CAAC,CAAC,CACDa,OAAO,CAACR,KAAK,CAACS,OAAO,EAAGJ,KAAK,IAAK;MACjCA,KAAK,CAACV,SAAS,GAAG,KAAK;IACzB,CAAC,CAAC,CACDa,OAAO,CAACR,KAAK,CAACU,SAAS,EAAE,CAACL,KAAK,EAAEM,MAAM,KAAK;MAC3CN,KAAK,CAAChB,IAAI,GAAGsB,MAAM,CAACC,OAAO;MAC3BP,KAAK,CAACV,SAAS,GAAG,KAAK;IACzB,CAAC,CAAC,CACDa,OAAO,CAACR,KAAK,CAACa,QAAQ,EAAGR,KAAK,IAAK;MAClCA,KAAK,CAACV,SAAS,GAAG,KAAK;IACzB,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAeO,SAAS,CAACY,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module"}